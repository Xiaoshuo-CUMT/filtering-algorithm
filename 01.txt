%**************Butterworth低通滤波********************************
function [data1] = LP( data )
Fc = 5;    %截止频率 5Hz
Fs = 25;    %采样率 25Hz
Wc=2*Fc/Fs;       
x = data(:,1);
y = data(:,2);
z = data(:,3);
[b,a]=butter(4,Wc);   %4阶
fx = filter(b,a,x);
fy = filter(b,a,y);
fz = filter(b,a,z);
data1 = [fx,fy,fz];

% fx1 = (2*16)/(2^13)*fx;	
% fy1 = (2*16)/(2^13)*fy;	
% fz1 = (2*16)/(2^13)*fz;	
% plot((1:length(fx))/200,fx1,(1:length(fy))/200,fy1,(1:length(fz))/200,fz1);
% title('Filtered');
% xlabel('time [s]');
% ylabel('Gravities [G]');
% legend('x','y','z');	
end



%**************Kalman滤波********************************
function [ X ] = Kalman( data )
fx = data(:,1);
fy = data(:,2);
fz = data(:,3);
r=3;
L = [fx,fy,fz]';
X = [-0.74533 -9.1302 -0.60558]';  
N = size(fx,1);
Y = zeros(r,N-1);
X = [X Y]; 
 A = rand(3,3);  
 C = rand(3,3); 
 I = rand(3,3); 
 Q = rand(3,3); 
 R = rand(3,3); 
 P1 = Q ;  
 P2 = zeros(r,r);  
 for k = 1:N  
     X(:,k) = A*X(:,k); 
     P2 = A*P1*A'+Q;  
     G = P2*C'*inv(C*P2*C'+R); 
     X(:,k+1) = X(:,k)+G*(L(:,k)-C*X(:,k)); 
     P1 = (I-G*C)*P2; 
 end  
end


%**************main********************************
clc  
clear  
maxgen=100;                        
sizepop=100;                     
pcross=[0.5];                      
pmutation=[0.1];                  
numsum=45;   
lenchrom=ones(1,numsum);          
bound=[-3*ones(numsum,1) 3*ones(numsum,1)];   
individuals=struct('fitness',zeros(1,sizepop), 'chrom',[]);  
avgfitness=[];               
bestfitness=[];                 
bestchrom=[];                
g=[];
h=[];
C=[];
C=load('chrom.mat');
C1=load('fitness.mat');
for s=1:sizepop
    individuals.chrom(s,:)=C.g(s,:);
    individuals.fitness(1,s)=C1.h(1,s);
end 
[bestfitness bestindex]=max(individuals.fitness);  
bestchrom=individuals.chrom(bestindex,:);  
avgfitness=sum(individuals.fitness)/sizepop;  
trace=ones(maxgen+1,2);
trace(1,:)=[avgfitness bestfitness];
for i=1:maxgen  
    disp(['genetic',num2str(i)])  
    individuals=Select(individuals,sizepop);   
    individuals.chrom=Cross(pcross,lenchrom,individuals.chrom,sizepop,bound);  
    individuals.chrom=Mutation(pmutation,lenchrom,individuals.chrom,sizepop,i,maxgen,bound);  
    for j=1:sizepop  
        x=individuals.chrom(j,:); 
        individuals.fitness(1,j)=fun(x);  
    end  
    [newbestfitness,newbestindex]=max(individuals.fitness);  
    [worstfitness,worstindex]=min(individuals.fitness);  
    if bestfitness<newbestfitness  
        bestfitness=newbestfitness;  
        bestchrom=individuals.chrom(newbestindex,:);  
    end  
    avgfitness=sum(individuals.fitness)/sizepop;  
    trace(i+1,:)=[avgfitness bestfitness]; 
    disp(['best',num2str(bestfitness)])
    disp(['avg',num2str(avgfitness)])
    individuals.chrom(worstindex,:)=bestchrom;  
    individuals.fitness(worstindex)=bestfitness;  
end  





